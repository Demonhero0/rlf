diff --git a/accounts/abi/abi.go b/accounts/abi/abi.go
index 254b1f7fb..eab934252 100644
--- a/accounts/abi/abi.go
+++ b/accounts/abi/abi.go
@@ -21,6 +21,7 @@ import (
 	"encoding/json"
 	"fmt"
 	"io"
+	"strconv"
 )
 
 // The ABI holds information about a contract's context and available
@@ -91,6 +92,12 @@ func (abi ABI) Unpack(v interface{}, name string, output []byte) (err error) {
 	return fmt.Errorf("abi: could not locate named method or event")
 }
 
+func BytesToUint64(bs []byte) uint64 {
+	s := fmt.Sprintf("%x", bs)
+	u, _ := strconv.ParseUint(s, 16, 64)
+	return u
+}
+
 // UnmarshalJSON implements json.Unmarshaler interface
 func (abi *ABI) UnmarshalJSON(data []byte) error {
 	var fields []struct {
@@ -114,14 +121,17 @@ func (abi *ABI) UnmarshalJSON(data []byte) error {
 			abi.Constructor = Method{
 				Inputs: field.Inputs,
 			}
+			abi.Constructor.ID = BytesToUint64(abi.Constructor.Id())
 		// empty defaults to function according to the abi spec
 		case "function", "":
-			abi.Methods[field.Name] = Method{
+			method := Method{
 				Name:    field.Name,
 				Const:   field.Constant,
 				Inputs:  field.Inputs,
 				Outputs: field.Outputs,
 			}
+			method.ID = BytesToUint64(method.Id())
+			abi.Methods[field.Name] = method
 		case "event":
 			abi.Events[field.Name] = Event{
 				Name:      field.Name,
diff --git a/accounts/abi/method.go b/accounts/abi/method.go
index f434ffdbe..6a16a964c 100644
--- a/accounts/abi/method.go
+++ b/accounts/abi/method.go
@@ -36,6 +36,7 @@ type Method struct {
 	Const   bool
 	Inputs  Arguments
 	Outputs Arguments
+	ID      uint64
 }
 
 // Sig returns the methods string signature according to the ABI spec.
diff --git a/consensus/ethash/consensus.go b/consensus/ethash/consensus.go
index 99eec8221..0d8e45a59 100644
--- a/consensus/ethash/consensus.go
+++ b/consensus/ethash/consensus.go
@@ -98,7 +98,7 @@ func (ethash *Ethash) VerifyHeaders(chain consensus.ChainReader, headers []*type
 	}
 
 	// Spawn as many workers as allowed threads
-	workers := runtime.GOMAXPROCS(0)
+	workers := runtime.GOMAXPROCS(1)
 	if len(headers) < workers {
 		workers = len(headers)
 	}
@@ -295,15 +295,16 @@ func (ethash *Ethash) CalcDifficulty(chain consensus.ChainReader, time uint64, p
 // the difficulty that a new block should have when created at time
 // given the parent block's time and difficulty.
 func CalcDifficulty(config *params.ChainConfig, time uint64, parent *types.Header) *big.Int {
-	next := new(big.Int).Add(parent.Number, big1)
-	switch {
-	case config.IsByzantium(next):
-		return calcDifficultyByzantium(time, parent)
-	case config.IsHomestead(next):
-		return calcDifficultyHomestead(time, parent)
-	default:
-		return calcDifficultyFrontier(time, parent)
-	}
+	// next := new(big.Int).Add(parent.Number, big1)
+	// switch {
+	// case config.IsByzantium(next):
+	// 	return calcDifficultyByzantium(time, parent)
+	// case config.IsHomestead(next):
+	// 	return calcDifficultyHomestead(time, parent)
+	// default:
+	// 	return calcDifficultyFrontier(time, parent)
+	// }
+	return big.NewInt(1)
 }
 
 // Some weird constants to avoid constant memory allocs for them.
diff --git a/consensus/ethash/ethash.go b/consensus/ethash/ethash.go
index 1b3dcee30..3c543b2ec 100644
--- a/consensus/ethash/ethash.go
+++ b/consensus/ethash/ethash.go
@@ -47,7 +47,7 @@ var (
 	maxUint256 = new(big.Int).Exp(big.NewInt(2), big.NewInt(256), big.NewInt(0))
 
 	// sharedEthash is a full instance that can be shared between multiple users.
-	sharedEthash = New(Config{"", 3, 0, "", 1, 0, ModeNormal})
+	// sharedEthash = New(Config{"", 3, 0, "", 1, 0, ModeNormal})
 
 	// algorithmRevision is the data structure version used for file naming.
 	algorithmRevision = 23
@@ -486,7 +486,8 @@ func NewFullFaker() *Ethash {
 // NewShared creates a full sized ethash PoW shared between all requesters running
 // in the same process.
 func NewShared() *Ethash {
-	return &Ethash{shared: sharedEthash}
+	// return &Ethash{shared: sharedEthash}
+	return NewFaker()
 }
 
 // cache tries to retrieve a verification cache for the specified block number
diff --git a/core/chain_makers.go b/core/chain_makers.go
index 31c9e3fb7..58422c947 100644
--- a/core/chain_makers.go
+++ b/core/chain_makers.go
@@ -252,6 +252,10 @@ func makeHeader(chain consensus.ChainReader, parent *types.Block, state *state.S
 	}
 }
 
+func ExpNewCanonical(engine consensus.Engine, n int, full bool) (ethdb.Database, *BlockChain, error) {
+	return newCanonical(engine, n, full)
+}
+
 // newCanonical creates a chain database, and injects a deterministic canonical
 // chain. Depending on the full flag, if creates either a full block chain or a
 // header only chain.
diff --git a/core/vm/instructions.go b/core/vm/instructions.go
index 0689ee39c..5a85ce68b 100644
--- a/core/vm/instructions.go
+++ b/core/vm/instructions.go
@@ -797,7 +797,7 @@ func opSuicide(pc *uint64, evm *EVM, contract *Contract, memory *Memory, stack *
 	balance := evm.StateDB.GetBalance(contract.Address())
 	evm.StateDB.AddBalance(common.BigToAddress(stack.pop()), balance)
 
-	evm.StateDB.Suicide(contract.Address())
+	// evm.StateDB.Suicide(contract.Address())
 	return nil, nil
 }
 
diff --git a/eth/backend.go b/eth/backend.go
index ffd5d8542..c6ca85e32 100644
--- a/eth/backend.go
+++ b/eth/backend.go
@@ -216,11 +216,16 @@ func CreateConsensusEngine(ctx *node.ServiceContext, config *ethash.Config, chai
 	if chainConfig.Clique != nil {
 		return clique.New(chainConfig.Clique, db)
 	}
+	config.PowMode = ethash.ModeFake
 	// Otherwise assume proof-of-work
 	switch {
 	case config.PowMode == ethash.ModeFake:
 		log.Warn("Ethash used in fake mode")
 		return ethash.NewFaker()
+	case config.PowMode == ethash.ModeFullFake:
+		log.Warn("Ethash used in full fake mode")
+		engine := ethash.NewFullFaker()
+		return engine
 	case config.PowMode == ethash.ModeTest:
 		log.Warn("Ethash used in test mode")
 		return ethash.NewTester()
diff --git a/mobile/init.go b/mobile/init.go
index 2025d85ed..11916dc17 100644
--- a/mobile/init.go
+++ b/mobile/init.go
@@ -30,5 +30,6 @@ func init() {
 	log.Root().SetHandler(log.LvlFilterHandler(log.LvlInfo, log.StreamHandler(os.Stderr, log.TerminalFormat(false))))
 
 	// Initialize the goroutine count
-	runtime.GOMAXPROCS(runtime.NumCPU())
+	// runtime.GOMAXPROCS(runtime.NumCPU())
+	runtime.GOMAXPROCS(1)
 }
